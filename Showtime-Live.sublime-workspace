{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Pyro",
				"PyroWrapper"
			],
			[
				"create",
				"create_missing_wrappers"
			],
			[
				"remove",
				"remove_missing_children"
			],
			[
				"removed",
				"removed"
			],
			[
				"Pyr",
				"PyroWrapper"
			],
			[
				"update",
				"update_hierarchy"
			],
			[
				"SONG",
				"SONG_TRACKS_UPDATED"
			],
			[
				"Song",
				"PyroSong"
			],
			[
				"PyroDe",
				"PyroDeviceParameter"
			],
			[
				"ins",
				"instance"
			],
			[
				"class",
				"classmethod"
			],
			[
				"method",
				"methodname"
			],
			[
				"reg",
				"registration_thread"
			],
			[
				"parame",
				"parameter"
			],
			[
				"return",
				"returntrack"
			],
			[
				"param",
				"parameterindex"
			],
			[
				"log",
				"log_message"
			],
			[
				"METHO",
				"METHOD_WRITE"
			],
			[
				"METHOD",
				"METHOD_RESPOND"
			],
			[
				"parent",
				"_parent"
			],
			[
				"instance",
				"instanceId"
			],
			[
				"Live",
				"LiveSubscriber"
			],
			[
				"pref",
				"prefix_name"
			],
			[
				"OUT",
				"OUTGOING_PREFIX"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "from __future__ import with_statement\n\n# Append Pyro and missing standard python scripts to the path\nimport sys\n#sys.path.append(\"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5\")\n#sys.path.append(\"/System/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload\")\n\nimport os\nsys.path.append(os.path.join(os.path.dirname(__file__), \"ext_libs\"))\n\nimport encodings\n\n# Import pyro\nimport Pyro.naming\nimport Pyro.errors\nimport Pyro.core\nPyro.config.PYRO_STORAGE = \"/tmp\"\n\n# Import Live libraries\nimport Live\nfrom _Framework.ControlSurface import ControlSurface\nfrom _Framework.EncoderElement import EncoderElement\n\n# Import custom live objects\nfrom LiveUtils import *\nfrom ControlSurfaceComponents import *\nfrom ControlSurfaceComponents.PyroEncoderElement import PyroEncoderElement\nfrom LiveSubscriber import LiveSubscriber\nfrom LivePublisher import LivePublisher\n\nfrom LiveWrappers.PyroWrapper import PyroWrapper\nfrom LiveWrappers.PyroDevice import PyroDevice\nfrom LiveWrappers.PyroDeviceParameter import PyroDeviceParameter\nfrom LiveWrappers.PyroSend import PyroSend\nfrom LiveWrappers.PyroSong import PyroSong\nfrom LiveWrappers.PyroTrack import PyroTrack\n\nfrom Logger import Log\n\n\nclass ShowtimeBridge(ControlSurface):\n\n    def __init__(self, c_instance):\n        ControlSurface.__init__(self, c_instance)\n        with self.component_guard():\n            self.cInstance = c_instance\n            self._suppress_send_midi = True\n\n            Log.set_logger(self.log_message)\n            Log.write(\"--------------------\")\n            Log.write(\"ShowtimeBridge START\")\n\n            self.initPyroServer()\n\n            # Register methods to the showtimebridge server\n            for cls in PyroWrapper.__subclasses__():\n                cls.clear_instances()\n                cls.register_methods()\n                for action in cls.incoming_methods().values():\n                    Log.write(\"Adding \" + str(action) + \" to incoming callbacks\")\n                    self.subscriber.add_incoming_action(action.methodName, cls, action.callback)\n                    self.publisher.register_to_showtime(action.methodName, action.methodAccess, action.methodArgs)\n\n                for action in cls.outgoing_methods().values():\n                    Log.write(\"Adding \" + str(action) + \" to outgoing methods\")\n                    self.publisher.register_to_showtime(action.methodName, action.methodAccess)\n\n            # Midi clock to trigger incoming message check\n            self.clock = PyroEncoderElement(0, 119)\n\n            self.build_wrappers()\n            self.refresh_state()\n            self._suppress_send_midi = False\n\n    def initPyroServer(self):\n        Pyro.config.PYRO_ES_BLOCKQUEUE = False\n\n        # Event listener\n        Pyro.core.initClient()\n\n        # Create publisher and subscriber links to event server\n        self.publisher = LivePublisher()\n        self.subscriber = LiveSubscriber(self.publisher)\n\n        # Set the global publisher for all wrappers\n        PyroWrapper.set_publisher(self.publisher)\n\n    def build_wrappers(self):\n        # Song\n        songWrapper = PyroSong.add_instance(PyroSong(getSong(), None))\n       \n        # Tracks\n        # for trackindex, track in enumerate(songWrapper.handle().tracks):\n        #     trackWrapper = PyroTrack.add_instance(PyroTrack(trackindex, track, self))\n\n        #     # Devices\n        #     for deviceindex, device in enumerate(track.devices):\n        #         deviceWrapper = PyroDevice.add_instance(PyroDevice(deviceindex, device, trackWrapper))\n\n        #         # Device parameters\n        #         for parameterindex, param in enumerate(device.parameters):\n        #             PyroDeviceParameter.add_instance(PyroDeviceParameter(parameterindex, param, deviceWrapper))\n\n            # # Sends\n            # for sendindex, send in enumerate(trackWrapper.handle().mixer_device.sends):\n            #     sendParamWrapper = PyroSendVolume(sendindex, send, trackWrapper)\n\n        # Return tracks\n        # for returntrackindex, returntrack in enumerate(self.handle().return_tracks):\n        #     returnTrackWrapper = PyroReturn(returntrackindex, returntrack, self)\n\n        #     # Return devices\n        #     for deviceindex, device in enumerate(returntrack.devices):\n        #         deviceWrapper = PyroDevice(deviceindex, device, returnTrackWrapper)\n\n        #         # Return parameters\n        #         for parameterindex, parameter in enumerate(device.parameters):\n        #             parameterWrapper = PyroDeviceParameter(parameterindex, parameter, deviceWrapper)\n\n    def disconnect(self):\n        self._suppress_send_midi = True\n        self._suppress_send_midi = False\n        ControlSurface.disconnect(self)\n\n    def refresh_state(self):\n        ControlSurface.refresh_state(self)\n        self.request_rebuild_midi_map()\n\n    def build_midi_map(self, midi_map_handle):\n        Log.write(\"Building midi map...\")\n        ControlSurface.build_midi_map(self, midi_map_handle)\n\n    def receive_midi(self, midi_bytes):\n        # Hack to get a faster update loop. Call our update function each time we receive\n        # a midi message\n        self.requestLoop()\n        ControlSurface.receive_midi(self, midi_bytes)\n\n    def suggest_map_mode(self, cc_no, channel):\n        return Live.MidiMap.MapMode.absolute\n\n    def update_display(self):\n        #Call the pyro request handler so that messages will always be accepted\n        self.requestLoop()\n        ControlSurface.update_display(self)\n\n    def requestLoop(self):\n        self.subscriber.handle_requests()\n",
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/ShowtimeBridge.py",
			"file_size": 5569,
			"file_write_time": 130794842060000000,
			"settings":
			{
				"buffer_size": 5585,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/Logger.py",
			"settings":
			{
				"buffer_size": 226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/__init__.py",
			"settings":
			{
				"buffer_size": 153,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveUtils.py",
			"settings":
			{
				"buffer_size": 7570,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/PyroBridge/LiveRouter.py",
			"settings":
			{
				"buffer_size": 3683,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_method.py",
			"settings":
			{
				"buffer_size": 2033,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSong.py",
			"settings":
			{
				"buffer_size": 5122,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "Showtime_Live/PyroBridge/ShowtimeLiveNode.py",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroTrack.py",
			"settings":
			{
				"buffer_size": 2323,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter-pep8:\n------------------\n\n  SublimeLinter-pep8\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to pep8.\n  \n  ** IMPORTANT! **\n  \n  Before this plugin will activate, you *must*\n  follow the installation instructions here:\n  \n  https://github.com/SublimeLinter/SublimeLinter-pep8\n  \n  ",
			"settings":
			{
				"buffer_size": 395,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"scratch": true
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveSubscriber.py",
			"settings":
			{
				"buffer_size": 1745,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LivePublisher.py",
			"settings":
			{
				"buffer_size": 1359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/copyScripts.sh",
			"settings":
			{
				"buffer_size": 495,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/mystfit/Code/showtime/Showtime-Python/scripts/st-methodeditor.py",
			"settings":
			{
				"buffer_size": 1620,
				"line_ending": "Unix"
			}
		},
		{
			"file": "setup.py",
			"settings":
			{
				"buffer_size": 826,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_node.py",
			"settings":
			{
				"buffer_size": 14444,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDeviceParameter.py",
			"settings":
			{
				"buffer_size": 1581,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSend.py",
			"settings":
			{
				"buffer_size": 1049,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroWrapper.py",
			"settings":
			{
				"buffer_size": 5977,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDevice.py",
			"settings":
			{
				"buffer_size": 883,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# # Register outgoing Showtime actions\n        # self.node.request_register_method(\n        #     PyroTrackActions.FIRED_SLOT_INDEX, ZstMethod.READ)\n        # self.node.request_register_method(\n        #     PyroTrackActions.OUTPUT_METER, ZstMethod.READ)\n        # self.node.request_register_method(\n        #     PyroTrackActions.PLAYING_SLOT_INDEX, ZstMethod.READ)\n        # self.node.request_register_method(\n        #     PyroSongActions.METERS_UPDATED, ZstMethod.READ)\n        #self.node.request_register_method(\n        #    PyroDeviceParameterActions.VALUE_UPDATED, ZstMethod.READ)\n        # self.node.request_register_method(\n        #     PyroDeviceActions.PARAMETERS_UPDATED, ZstMethod.READ)\n        # self.node.request_register_method(\n        #     PyroSendVolumeActions.SEND_UPDATED, ZstMethod.READ)\n\n        # Register outgoing Pyro actions\n        outgoingActions = [\n            # PyroTrackActions.FIRED_SLOT_INDEX,\n            # PyroTrackActions.OUTPUT_METER,\n            # PyroTrackActions.PLAYING_SLOT_INDEX,\n            # PyroDeviceActions.PARAMETERS_UPDATED,\n            # PyroDeviceParameterActions.VALUE_UPDATED,\n            # PyroSongActions.GET_SONG_LAYOUT,\n            # PyroSongActions.GET_TRACKS,\n            # PyroSongActions.METERS_UPDATED,\n            # PyroSendVolumeActions.SEND_UPDATED\n        ]\n\n        subscribed = [\n            PyroPrefixes.OUTGOING + method for method in outgoingActions]\n        self.subscribe(subscribed)\n\n        # Incoming methods\n        # self.node.request_register_method(\n        #     PyroSongActions.FIRE_CLIP,\n        #     ZstMethod.WRITE,\n        #     {\n        #         \"trackindex\": None,\n        #         \"clipindex\": None\n        #     },\n        #     self.incoming)\n\n        # self.node.request_register_method(\n        #     PyroSongActions.STOP_TRACK,\n        #     ZstMethod.WRITE,\n        #     {\n        #         \"trackindex\": None\n        #     },\n        #     self.incoming)\n\n        # self.node.request_register_method(\n        #     PyroSongActions.SET_VALUE,\n        #     ZstMethod.WRITE,\n        #     {\n        #         \"trackindex\": None,\n        #         \"deviceindex\": None,\n        #         \"parameterindex\": None,\n        #         \"category\": None,\n        #         \"value\": None\n        #     },\n        #     self.incoming)\n\n        # self.node.request_register_method(\n        #     PyroSongActions.SET_SEND,\n        #     ZstMethod.WRITE,\n        #     {\n        #         \"trackindex\": None,\n        #         \"sendindex\": None,\n        #         \"value\": None\n        #     },\n        #     self.incoming)\n\n        # self.node.request_register_method(\n        #     PyroSongActions.GET_SONG_LAYOUT,\n        #     ZstMethod.RESPONDER, None,\n        #     self.incoming, None)\n\n        # self.node.request_register_method(\n        #     PyroSongActions.GET_TRACKS,\n        #     ZstMethod.RESPONDER, {\"category\": 0},\n        #     self.incoming, None)",
			"settings":
			{
				"buffer_size": 2958,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "lin",
		"selected_items":
		[
			[
				"lin",
				"SublimeLinter: Show All Errors"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"lint",
				"SublimeLinter: Show All Errors"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/mystfit/Code/showtime/Showtime-Live/scripts",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/ControlSurfaceComponents",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/PyroBridge"
	],
	"file_history":
	[
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/ext_libs/Pyro/util.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveSubscriber.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LivePublisher.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/Logger.py",
		"/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_method.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/PyroBridge/ShowtimeLiveNode.py",
		"/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_base.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDeviceParameter.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDevice.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroTrack.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSong.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroWrapper.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSend.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/scripts/LiveShowtimeClient.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/__init__.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/PyroBridge/ShowtimeRouter.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live.egg-info/SOURCES.txt",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/copyScripts.sh",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/ext_libs/Pyro/EventService/Clients.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSendVolume.py",
		"/Users/mystfit/Code/showtime/Showtime-Live/Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/PyroShared.py",
		"/Users/mystfit/Downloads/hawk.svg",
		"/Users/mystfit/Desktop/EVE Online.desktop"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"'''",
			"'''\n",
			"'''",
			"song_tracks_updated",
			"clips_to_json",
			"process_queued_events",
			"\n        ",
			"create",
			"getS",
			"raise Exception",
			"PyroEncoderElement",
			"import live",
			"from Log import Log",
			"import Log",
			"log_",
			"log",
			"received method",
			"no ext",
			"twice",
			"raise",
			"_instances",
			"request",
			"daem",
			"ShowtimeRouter",
			"recv",
			"handle_outgoing",
			"outMailbox",
			"PyroShared",
			"shared",
			"Event",
			"event",
			".subscribe(",
			"subscr",
			"parent",
			"PyroPrefixes",
			"_incoming_methods",
			"song",
			"get",
			"sendvolume",
			"PyroSong",
			"PyroTrackActions",
			"METHOD_READ",
			"import queue",
			"queue",
			"handle_requests",
			"add_incoming_action",
			"PyroWrappers",
			"process_value_changed_messages",
			"ignoreList",
			"get_track",
			"pub",
			"publ",
			"ref_wrapper",
			"instanceid",
			"def getTrack",
			"getTrack",
			"import Live",
			"get_reference",
			"type",
			"NotImplemented",
			"register_to_showtime",
			"incomingActions",
			"raise",
			"register_to_showtime",
			"add_outgoing_method",
			"add_method",
			"for action",
			"register_to_showtime",
			"register_method_check",
			"publish_check",
			"incoming",
			"publisher",
			"LivePublisher",
			"register_method_check",
			"publ",
			"clips_to_json",
			"class",
			"sendvolume",
			"FIRED_SLOT_INDEX",
			"register_pyro_forwarder",
			"register_pyro_method",
			"incomi",
			"outg",
			"PyroTrackActions"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\"\"\"",
			"\n    \"\"\"\n",
			"\n    \"\"\"",
			"\n\"\"\"",
			"from Logger import Log",
			"from Log import Log",
			"LiveRouter",
			"PyroWrapper",
			"handle",
			"add_outgoing_method",
			"register_to_showtime",
			"send_to_showtime"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/ShowtimeBridge.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5585,
						"regions":
						{
						},
						"selection":
						[
							[
								3204,
								3358
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1288.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/Logger.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 226,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveUtils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7570,
						"regions":
						{
						},
						"selection":
						[
							[
								1124,
								1124
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Showtime_Live/PyroBridge/LiveRouter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3683,
						"regions":
						{
						},
						"selection":
						[
							[
								1587,
								1587
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_method.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2033,
						"regions":
						{
						},
						"selection":
						[
							[
								685,
								685
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSong.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5122,
						"regions":
						{
						},
						"selection":
						[
							[
								591,
								591
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Showtime_Live/PyroBridge/ShowtimeLiveNode.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroTrack.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2323,
						"regions":
						{
						},
						"selection":
						[
							[
								927,
								927
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 395,
						"regions":
						{
						},
						"selection":
						[
							[
								395,
								395
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveSubscriber.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1745,
						"regions":
						{
						},
						"selection":
						[
							[
								1475,
								1475
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LivePublisher.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "Showtime_Live/copyScripts.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 495,
						"regions":
						{
						},
						"selection":
						[
							[
								495,
								495
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/Users/mystfit/Code/showtime/Showtime-Python/scripts/st-methodeditor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1620,
						"regions":
						{
						},
						"selection":
						[
							[
								1085,
								1085
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "setup.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 826,
						"regions":
						{
						},
						"selection":
						[
							[
								826,
								826
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/Users/mystfit/Code/showtime/Showtime-Python/Showtime/zst_node.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14444,
						"regions":
						{
						},
						"selection":
						[
							[
								13045,
								13045
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4053.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDeviceParameter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1581,
						"regions":
						{
						},
						"selection":
						[
							[
								1120,
								1120
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroSend.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1049,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroWrapper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5977,
						"regions":
						{
						},
						"selection":
						[
							[
								1280,
								1280
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "Showtime_Live/Midi_Remote_Scripts/ShowtimeBridge/LiveWrappers/PyroDevice.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 883,
						"regions":
						{
						},
						"selection":
						[
							[
								673,
								673
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 20,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2958,
						"regions":
						{
						},
						"selection":
						[
							[
								1714,
								1714
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Showtime-Live.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
