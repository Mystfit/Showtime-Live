# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_showtime')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_showtime')
    _showtime = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_showtime', [dirname(__file__)])
        except ImportError:
            import _showtime
            return _showtime
        try:
            _mod = imp.load_module('_showtime', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _showtime = swig_import_helper()
    del swig_import_helper
else:
    import _showtime
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _showtime.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _showtime.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _showtime.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _showtime.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _showtime.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _showtime.SwigPyIterator_equal(self, x)

    def copy(self):
        return _showtime.SwigPyIterator_copy(self)

    def next(self):
        return _showtime.SwigPyIterator_next(self)

    def __next__(self):
        return _showtime.SwigPyIterator___next__(self)

    def previous(self):
        return _showtime.SwigPyIterator_previous(self)

    def advance(self, n):
        return _showtime.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _showtime.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _showtime.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _showtime.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _showtime.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _showtime.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _showtime.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _showtime.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ConnectionPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionPair, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _showtime.ConnectionPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _showtime.ConnectionPair___nonzero__(self)

    def __bool__(self):
        return _showtime.ConnectionPair___bool__(self)

    def __len__(self):
        return _showtime.ConnectionPair___len__(self)

    def __getslice__(self, i, j):
        return _showtime.ConnectionPair___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _showtime.ConnectionPair___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _showtime.ConnectionPair___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _showtime.ConnectionPair___delitem__(self, *args)

    def __getitem__(self, *args):
        return _showtime.ConnectionPair___getitem__(self, *args)

    def __setitem__(self, *args):
        return _showtime.ConnectionPair___setitem__(self, *args)

    def pop(self):
        return _showtime.ConnectionPair_pop(self)

    def append(self, x):
        return _showtime.ConnectionPair_append(self, x)

    def empty(self):
        return _showtime.ConnectionPair_empty(self)

    def size(self):
        return _showtime.ConnectionPair_size(self)

    def swap(self, v):
        return _showtime.ConnectionPair_swap(self, v)

    def begin(self):
        return _showtime.ConnectionPair_begin(self)

    def end(self):
        return _showtime.ConnectionPair_end(self)

    def rbegin(self):
        return _showtime.ConnectionPair_rbegin(self)

    def rend(self):
        return _showtime.ConnectionPair_rend(self)

    def clear(self):
        return _showtime.ConnectionPair_clear(self)

    def get_allocator(self):
        return _showtime.ConnectionPair_get_allocator(self)

    def pop_back(self):
        return _showtime.ConnectionPair_pop_back(self)

    def erase(self, *args):
        return _showtime.ConnectionPair_erase(self, *args)

    def __init__(self, *args):
        this = _showtime.new_ConnectionPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _showtime.ConnectionPair_push_back(self, x)

    def front(self):
        return _showtime.ConnectionPair_front(self)

    def back(self):
        return _showtime.ConnectionPair_back(self)

    def assign(self, n, x):
        return _showtime.ConnectionPair_assign(self, n, x)

    def resize(self, *args):
        return _showtime.ConnectionPair_resize(self, *args)

    def insert(self, *args):
        return _showtime.ConnectionPair_insert(self, *args)

    def reserve(self, n):
        return _showtime.ConnectionPair_reserve(self, n)

    def capacity(self):
        return _showtime.ConnectionPair_capacity(self)
    __swig_destroy__ = _showtime.delete_ConnectionPair
    __del__ = lambda self: None
ConnectionPair_swigregister = _showtime.ConnectionPair_swigregister
ConnectionPair_swigregister(ConnectionPair)

class ZstURI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZstURI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZstURI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IN_JACK = _showtime.ZstURI_IN_JACK
    OUT_JACK = _showtime.ZstURI_OUT_JACK
    if _newclass:
        create = staticmethod(_showtime.ZstURI_create)
    else:
        create = _showtime.ZstURI_create
    if _newclass:
        destroy = staticmethod(_showtime.ZstURI_destroy)
    else:
        destroy = _showtime.ZstURI_destroy

    def performer(self):
        return _showtime.ZstURI_performer(self)

    def instrument(self):
        return _showtime.ZstURI_instrument(self)

    def name(self):
        return _showtime.ZstURI_name(self)

    def direction(self):
        return _showtime.ZstURI_direction(self)

    def to_char(self):
        return _showtime.ZstURI_to_char(self)
    if _newclass:
        from_str = staticmethod(_showtime.ZstURI_from_str)
    else:
        from_str = _showtime.ZstURI_from_str

    def __eq__(self, other):
        return _showtime.ZstURI___eq__(self, other)

    def __ne__(self, other):
        return _showtime.ZstURI___ne__(self, other)

    def __lt__(self, b):
        return _showtime.ZstURI___lt__(self, b)
    __swig_destroy__ = _showtime.delete_ZstURI
    __del__ = lambda self: None
ZstURI_swigregister = _showtime.ZstURI_swigregister
ZstURI_swigregister(ZstURI)

def ZstURI_create(performer, instrument, name, direction):
    return _showtime.ZstURI_create(performer, instrument, name, direction)
ZstURI_create = _showtime.ZstURI_create

def ZstURI_destroy(uri):
    return _showtime.ZstURI_destroy(uri)
ZstURI_destroy = _showtime.ZstURI_destroy

def ZstURI_from_str(s):
    return _showtime.ZstURI_from_str(s)
ZstURI_from_str = _showtime.ZstURI_from_str

class ZstPlug(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZstPlug, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZstPlug, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _showtime.delete_ZstPlug
    __del__ = lambda self: None

    def get_URI(self):
        return _showtime.ZstPlug_get_URI(self)

    def attach_recv_callback(self, callback):
        return _showtime.ZstPlug_attach_recv_callback(self, callback)

    def destroy_recv_callback(self, callback):
        return _showtime.ZstPlug_destroy_recv_callback(self, callback)

    def fire(self):
        return _showtime.ZstPlug_fire(self)

    def recv(self, obj):
        return _showtime.ZstPlug_recv(self, obj)
ZstPlug_swigregister = _showtime.ZstPlug_swigregister
ZstPlug_swigregister(ZstPlug)

INT_PLUG = _showtime.INT_PLUG
INT_ARR_PLUG = _showtime.INT_ARR_PLUG
FLOAT_PLUG = _showtime.FLOAT_PLUG
FLOAT_ARR_PLUG = _showtime.FLOAT_ARR_PLUG
STRING_PLUG = _showtime.STRING_PLUG
class PlugCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlugCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlugCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PlugCallback:
            _self = None
        else:
            _self = self
        this = _showtime.new_PlugCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _showtime.delete_PlugCallback
    __del__ = lambda self: None

    def run(self, plug):
        return _showtime.PlugCallback_run(self, plug)
    def __disown__(self):
        self.this.disown()
        _showtime.disown_PlugCallback(self)
        return weakref_proxy(self)
PlugCallback_swigregister = _showtime.PlugCallback_swigregister
PlugCallback_swigregister(PlugCallback)

class PlugEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlugEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlugEvent, name)
    __repr__ = _swig_repr
    DEFAULT = _showtime.PlugEvent_DEFAULT
    CREATED = _showtime.PlugEvent_CREATED
    DESTROYED = _showtime.PlugEvent_DESTROYED
    HIT = _showtime.PlugEvent_HIT

    def __init__(self, *args):
        this = _showtime.new_PlugEvent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _showtime.delete_PlugEvent
    __del__ = lambda self: None

    def event(self):
        return _showtime.PlugEvent_event(self)

    def plug(self):
        return _showtime.PlugEvent_plug(self)
PlugEvent_swigregister = _showtime.PlugEvent_swigregister
PlugEvent_swigregister(PlugEvent)

class ZstIntPlug(ZstPlug):
    __swig_setmethods__ = {}
    for _s in [ZstPlug]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZstIntPlug, name, value)
    __swig_getmethods__ = {}
    for _s in [ZstPlug]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZstIntPlug, name)
    __repr__ = _swig_repr

    def __init__(self, uri):
        this = _showtime.new_ZstIntPlug(uri)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def fire(self, value):
        return _showtime.ZstIntPlug_fire(self, value)

    def recv(self, object):
        return _showtime.ZstIntPlug_recv(self, object)

    def get_value(self):
        return _showtime.ZstIntPlug_get_value(self)
    __swig_destroy__ = _showtime.delete_ZstIntPlug
    __del__ = lambda self: None
ZstIntPlug_swigregister = _showtime.ZstIntPlug_swigregister
ZstIntPlug_swigregister(ZstIntPlug)


def convert_to_int_plug(plug):
    return _showtime.convert_to_int_plug(plug)
convert_to_int_plug = _showtime.convert_to_int_plug
NATIVE_RUNTIME = _showtime.NATIVE_RUNTIME
PYTHON_RUNTIME = _showtime.PYTHON_RUNTIME
DOTNET_RUNTIME = _showtime.DOTNET_RUNTIME
class Showtime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Showtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Showtime, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _showtime.delete_Showtime
    __del__ = lambda self: None
    if _newclass:
        endpoint = staticmethod(_showtime.Showtime_endpoint)
    else:
        endpoint = _showtime.Showtime_endpoint
    if _newclass:
        destroy = staticmethod(_showtime.Showtime_destroy)
    else:
        destroy = _showtime.Showtime_destroy
    if _newclass:
        set_runtime_language = staticmethod(_showtime.Showtime_set_runtime_language)
    else:
        set_runtime_language = _showtime.Showtime_set_runtime_language
    if _newclass:
        get_runtime_language = staticmethod(_showtime.Showtime_get_runtime_language)
    else:
        get_runtime_language = _showtime.Showtime_get_runtime_language
    if _newclass:
        init = staticmethod(_showtime.Showtime_init)
    else:
        init = _showtime.Showtime_init

    def join(stage_address):

        Showtime_set_runtime_language(PYTHON_RUNTIME);


        return _showtime.Showtime_join(stage_address)

    join = staticmethod(join)
    if _newclass:
        ping_stage = staticmethod(_showtime.Showtime_ping_stage)
    else:
        ping_stage = _showtime.Showtime_ping_stage
    if _newclass:
        create_performer = staticmethod(_showtime.Showtime_create_performer)
    else:
        create_performer = _showtime.Showtime_create_performer
    if _newclass:
        get_performer_by_name = staticmethod(_showtime.Showtime_get_performer_by_name)
    else:
        get_performer_by_name = _showtime.Showtime_get_performer_by_name
    if _newclass:
        pop_plug_event = staticmethod(_showtime.Showtime_pop_plug_event)
    else:
        pop_plug_event = _showtime.Showtime_pop_plug_event
    if _newclass:
        plug_event_queue_size = staticmethod(_showtime.Showtime_plug_event_queue_size)
    else:
        plug_event_queue_size = _showtime.Showtime_plug_event_queue_size
    if _newclass:
        create_int_plug = staticmethod(_showtime.Showtime_create_int_plug)
    else:
        create_int_plug = _showtime.Showtime_create_int_plug
    if _newclass:
        destroy_plug = staticmethod(_showtime.Showtime_destroy_plug)
    else:
        destroy_plug = _showtime.Showtime_destroy_plug
    if _newclass:
        get_all_plug_URIs = staticmethod(_showtime.Showtime_get_all_plug_URIs)
    else:
        get_all_plug_URIs = _showtime.Showtime_get_all_plug_URIs
    if _newclass:
        get_all_plug_connections = staticmethod(_showtime.Showtime_get_all_plug_connections)
    else:
        get_all_plug_connections = _showtime.Showtime_get_all_plug_connections
    if _newclass:
        connect_plugs = staticmethod(_showtime.Showtime_connect_plugs)
    else:
        connect_plugs = _showtime.Showtime_connect_plugs
Showtime_swigregister = _showtime.Showtime_swigregister
Showtime_swigregister(Showtime)

def Showtime_endpoint():
    return _showtime.Showtime_endpoint()
Showtime_endpoint = _showtime.Showtime_endpoint

def Showtime_destroy():
    return _showtime.Showtime_destroy()
Showtime_destroy = _showtime.Showtime_destroy

def Showtime_set_runtime_language(runtime):
    return _showtime.Showtime_set_runtime_language(runtime)
Showtime_set_runtime_language = _showtime.Showtime_set_runtime_language

def Showtime_get_runtime_language():
    return _showtime.Showtime_get_runtime_language()
Showtime_get_runtime_language = _showtime.Showtime_get_runtime_language

def Showtime_init():
    return _showtime.Showtime_init()
Showtime_init = _showtime.Showtime_init

def Showtime_join(stage_address):

    Showtime_set_runtime_language(PYTHON_RUNTIME);


    return _showtime.Showtime_join(stage_address)

def Showtime_ping_stage():
    return _showtime.Showtime_ping_stage()
Showtime_ping_stage = _showtime.Showtime_ping_stage

def Showtime_create_performer(name):
    return _showtime.Showtime_create_performer(name)
Showtime_create_performer = _showtime.Showtime_create_performer

def Showtime_get_performer_by_name(performer):
    return _showtime.Showtime_get_performer_by_name(performer)
Showtime_get_performer_by_name = _showtime.Showtime_get_performer_by_name

def Showtime_pop_plug_event():
    return _showtime.Showtime_pop_plug_event()
Showtime_pop_plug_event = _showtime.Showtime_pop_plug_event

def Showtime_plug_event_queue_size():
    return _showtime.Showtime_plug_event_queue_size()
Showtime_plug_event_queue_size = _showtime.Showtime_plug_event_queue_size

def Showtime_create_int_plug(uri):
    return _showtime.Showtime_create_int_plug(uri)
Showtime_create_int_plug = _showtime.Showtime_create_int_plug

def Showtime_destroy_plug(plug):
    return _showtime.Showtime_destroy_plug(plug)
Showtime_destroy_plug = _showtime.Showtime_destroy_plug

def Showtime_get_all_plug_URIs(*args):
    return _showtime.Showtime_get_all_plug_URIs(*args)
Showtime_get_all_plug_URIs = _showtime.Showtime_get_all_plug_URIs

def Showtime_get_all_plug_connections(*args):
    return _showtime.Showtime_get_all_plug_connections(*args)
Showtime_get_all_plug_connections = _showtime.Showtime_get_all_plug_connections

def Showtime_connect_plugs(a, b):
    return _showtime.Showtime_connect_plugs(a, b)
Showtime_connect_plugs = _showtime.Showtime_connect_plugs

# This file is compatible with both classic and new-style classes.


